package com.webservice;

import java.util.concurrent.Future;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.ws.AsyncHandler;
import javax.xml.ws.Holder;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.Response;
import javax.xml.ws.ResponseWrapper;

/**
 * This class was generated by the JAX-WS RI. JAX-WS RI 2.1.3-hudson-390-
 * Generated source version: 2.0
 * 
 */
@WebService(name = "WFDataCenterInterfaceSoap", targetNamespace = "http://wfdata.sale.gb168.cn/")
public interface WFDataCenterInterfaceSoap {

	/**
	 * 
	 * @return returns javax.xml.ws.Response<com.webservice.HelloWorldResponse>
	 */
	@WebMethod(operationName = "HelloWorld", action = "http://wfdata.sale.gb168.cn/HelloWorld")
	@RequestWrapper(localName = "HelloWorld", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.HelloWorld")
	@ResponseWrapper(localName = "HelloWorldResponse", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.HelloWorldResponse")
	public Response<HelloWorldResponse> helloWorldAsync();

	/**
	 * 
	 * @param asyncHandler
	 * @return returns java.util.concurrent.Future<? extends java.lang.Object>
	 */
	@WebMethod(operationName = "HelloWorld", action = "http://wfdata.sale.gb168.cn/HelloWorld")
	@RequestWrapper(localName = "HelloWorld", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.HelloWorld")
	@ResponseWrapper(localName = "HelloWorldResponse", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.HelloWorldResponse")
	public Future<?> helloWorldAsync(
			@WebParam(name = "asyncHandler", targetNamespace = "") AsyncHandler<HelloWorldResponse> asyncHandler);

	/**
	 * 
	 * @return returns java.lang.String
	 */
	@WebMethod(operationName = "HelloWorld", action = "http://wfdata.sale.gb168.cn/HelloWorld")
	@WebResult(name = "HelloWorldResult", targetNamespace = "http://wfdata.sale.gb168.cn/")
	@RequestWrapper(localName = "HelloWorld", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.HelloWorld")
	@ResponseWrapper(localName = "HelloWorldResponse", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.HelloWorldResponse")
	public String helloWorld();

	/**
	 * 
	 * @return returns javax.xml.ws.Response<com.webservice.IsConnectedResponse>
	 */
	@WebMethod(operationName = "IsConnected", action = "http://wfdata.sale.gb168.cn/IsConnected")
	@RequestWrapper(localName = "IsConnected", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.IsConnected")
	@ResponseWrapper(localName = "IsConnectedResponse", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.IsConnectedResponse")
	public Response<IsConnectedResponse> isConnectedAsync();

	/**
	 * 
	 * @param asyncHandler
	 * @return returns java.util.concurrent.Future<? extends java.lang.Object>
	 */
	@WebMethod(operationName = "IsConnected", action = "http://wfdata.sale.gb168.cn/IsConnected")
	@RequestWrapper(localName = "IsConnected", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.IsConnected")
	@ResponseWrapper(localName = "IsConnectedResponse", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.IsConnectedResponse")
	public Future<?> isConnectedAsync(
			@WebParam(name = "asyncHandler", targetNamespace = "") AsyncHandler<IsConnectedResponse> asyncHandler);

	/**
	 * 
	 * @return returns boolean
	 */
	@WebMethod(operationName = "IsConnected", action = "http://wfdata.sale.gb168.cn/IsConnected")
	@WebResult(name = "IsConnectedResult", targetNamespace = "http://wfdata.sale.gb168.cn/")
	@RequestWrapper(localName = "IsConnected", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.IsConnected")
	@ResponseWrapper(localName = "IsConnectedResponse", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.IsConnectedResponse")
	public boolean isConnected();

	/**
	 * 
	 * @return returns javax.xml.ws.Response<com.webservice.GetDateTimeResponse>
	 */
	@WebMethod(operationName = "GetDateTime", action = "http://wfdata.sale.gb168.cn/GetDateTime")
	@RequestWrapper(localName = "GetDateTime", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.GetDateTime")
	@ResponseWrapper(localName = "GetDateTimeResponse", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.GetDateTimeResponse")
	public Response<GetDateTimeResponse> getDateTimeAsync();

	/**
	 * 
	 * @param asyncHandler
	 * @return returns java.util.concurrent.Future<? extends java.lang.Object>
	 */
	@WebMethod(operationName = "GetDateTime", action = "http://wfdata.sale.gb168.cn/GetDateTime")
	@RequestWrapper(localName = "GetDateTime", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.GetDateTime")
	@ResponseWrapper(localName = "GetDateTimeResponse", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.GetDateTimeResponse")
	public Future<?> getDateTimeAsync(
			@WebParam(name = "asyncHandler", targetNamespace = "") AsyncHandler<GetDateTimeResponse> asyncHandler);

	/**
	 * 
	 * @return returns javax.xml.datatype.XMLGregorianCalendar
	 */
	@WebMethod(operationName = "GetDateTime", action = "http://wfdata.sale.gb168.cn/GetDateTime")
	@WebResult(name = "GetDateTimeResult", targetNamespace = "http://wfdata.sale.gb168.cn/")
	@RequestWrapper(localName = "GetDateTime", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.GetDateTime")
	@ResponseWrapper(localName = "GetDateTimeResponse", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.GetDateTimeResponse")
	public XMLGregorianCalendar getDateTime();

	/**
	 * 
	 * @param userState
	 * @param startTime
	 * @param unit
	 * @param username
	 * @param cls
	 * @param onlines
	 * @param token
	 * @param copys
	 * @param rdptauth
	 * @param sigprint
	 * @param prints
	 * @param endTime
	 * @param ip
	 * @return returns
	 *         javax.xml.ws.Response<com.webservice.CreateNonAccountingUserResponse
	 *         >
	 */
	@WebMethod(operationName = "CreateNonAccountingUser", action = "http://wfdata.sale.gb168.cn/CreateNonAccountingUser")
	@RequestWrapper(localName = "CreateNonAccountingUser", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.CreateNonAccountingUser")
	@ResponseWrapper(localName = "CreateNonAccountingUserResponse", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.CreateNonAccountingUserResponse")
	public Response<CreateNonAccountingUserResponse> createNonAccountingUserAsync(
			@WebParam(name = "Username", targetNamespace = "http://wfdata.sale.gb168.cn/") String username,
			@WebParam(name = "StartTime", targetNamespace = "http://wfdata.sale.gb168.cn/") XMLGregorianCalendar startTime,
			@WebParam(name = "EndTime", targetNamespace = "http://wfdata.sale.gb168.cn/") XMLGregorianCalendar endTime,
			@WebParam(name = "rdptauth", targetNamespace = "http://wfdata.sale.gb168.cn/") String rdptauth,
			@WebParam(name = "onlines", targetNamespace = "http://wfdata.sale.gb168.cn/") int onlines,
			@WebParam(name = "copys", targetNamespace = "http://wfdata.sale.gb168.cn/") int copys,
			@WebParam(name = "prints", targetNamespace = "http://wfdata.sale.gb168.cn/") int prints,
			@WebParam(name = "sigprint", targetNamespace = "http://wfdata.sale.gb168.cn/") int sigprint,
			@WebParam(name = "IP", targetNamespace = "http://wfdata.sale.gb168.cn/") String ip,
			@WebParam(name = "CLS", targetNamespace = "http://wfdata.sale.gb168.cn/") String cls,
			@WebParam(name = "Unit", targetNamespace = "http://wfdata.sale.gb168.cn/") String unit,
			@WebParam(name = "UserState", targetNamespace = "http://wfdata.sale.gb168.cn/") int userState,
			@WebParam(name = "Token", targetNamespace = "http://wfdata.sale.gb168.cn/") String token);

	/**
	 * 
	 * @param userState
	 * @param startTime
	 * @param unit
	 * @param username
	 * @param cls
	 * @param onlines
	 * @param token
	 * @param copys
	 * @param rdptauth
	 * @param asyncHandler
	 * @param sigprint
	 * @param prints
	 * @param endTime
	 * @param ip
	 * @return returns java.util.concurrent.Future<? extends java.lang.Object>
	 */
	@WebMethod(operationName = "CreateNonAccountingUser", action = "http://wfdata.sale.gb168.cn/CreateNonAccountingUser")
	@RequestWrapper(localName = "CreateNonAccountingUser", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.CreateNonAccountingUser")
	@ResponseWrapper(localName = "CreateNonAccountingUserResponse", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.CreateNonAccountingUserResponse")
	public Future<?> createNonAccountingUserAsync(
			@WebParam(name = "Username", targetNamespace = "http://wfdata.sale.gb168.cn/") String username,
			@WebParam(name = "StartTime", targetNamespace = "http://wfdata.sale.gb168.cn/") XMLGregorianCalendar startTime,
			@WebParam(name = "EndTime", targetNamespace = "http://wfdata.sale.gb168.cn/") XMLGregorianCalendar endTime,
			@WebParam(name = "rdptauth", targetNamespace = "http://wfdata.sale.gb168.cn/") String rdptauth,
			@WebParam(name = "onlines", targetNamespace = "http://wfdata.sale.gb168.cn/") int onlines,
			@WebParam(name = "copys", targetNamespace = "http://wfdata.sale.gb168.cn/") int copys,
			@WebParam(name = "prints", targetNamespace = "http://wfdata.sale.gb168.cn/") int prints,
			@WebParam(name = "sigprint", targetNamespace = "http://wfdata.sale.gb168.cn/") int sigprint,
			@WebParam(name = "IP", targetNamespace = "http://wfdata.sale.gb168.cn/") String ip,
			@WebParam(name = "CLS", targetNamespace = "http://wfdata.sale.gb168.cn/") String cls,
			@WebParam(name = "Unit", targetNamespace = "http://wfdata.sale.gb168.cn/") String unit,
			@WebParam(name = "UserState", targetNamespace = "http://wfdata.sale.gb168.cn/") int userState,
			@WebParam(name = "Token", targetNamespace = "http://wfdata.sale.gb168.cn/") String token,
			@WebParam(name = "asyncHandler", targetNamespace = "") AsyncHandler<CreateNonAccountingUserResponse> asyncHandler);

	/**
	 * 
	 * @param userState
	 * @param startTime
	 * @param unit
	 * @param username
	 * @param cls
	 * @param onlines
	 * @param token
	 * @param copys
	 * @param rdptauth
	 * @param sigprint
	 * @param prints
	 * @param endTime
	 * @param ip
	 * @return returns int
	 */
	@WebMethod(operationName = "CreateNonAccountingUser", action = "http://wfdata.sale.gb168.cn/CreateNonAccountingUser")
	@WebResult(name = "CreateNonAccountingUserResult", targetNamespace = "http://wfdata.sale.gb168.cn/")
	@RequestWrapper(localName = "CreateNonAccountingUser", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.CreateNonAccountingUser")
	@ResponseWrapper(localName = "CreateNonAccountingUserResponse", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.CreateNonAccountingUserResponse")
	public int createNonAccountingUser(
			@WebParam(name = "Username", targetNamespace = "http://wfdata.sale.gb168.cn/") String username,
			@WebParam(name = "StartTime", targetNamespace = "http://wfdata.sale.gb168.cn/") XMLGregorianCalendar startTime,
			@WebParam(name = "EndTime", targetNamespace = "http://wfdata.sale.gb168.cn/") XMLGregorianCalendar endTime,
			@WebParam(name = "rdptauth", targetNamespace = "http://wfdata.sale.gb168.cn/") String rdptauth,
			@WebParam(name = "onlines", targetNamespace = "http://wfdata.sale.gb168.cn/") int onlines,
			@WebParam(name = "copys", targetNamespace = "http://wfdata.sale.gb168.cn/") int copys,
			@WebParam(name = "prints", targetNamespace = "http://wfdata.sale.gb168.cn/") int prints,
			@WebParam(name = "sigprint", targetNamespace = "http://wfdata.sale.gb168.cn/") int sigprint,
			@WebParam(name = "IP", targetNamespace = "http://wfdata.sale.gb168.cn/") String ip,
			@WebParam(name = "CLS", targetNamespace = "http://wfdata.sale.gb168.cn/") String cls,
			@WebParam(name = "Unit", targetNamespace = "http://wfdata.sale.gb168.cn/") String unit,
			@WebParam(name = "UserState", targetNamespace = "http://wfdata.sale.gb168.cn/") int userState,
			@WebParam(name = "Token", targetNamespace = "http://wfdata.sale.gb168.cn/") String token);

	/**
	 * 
	 * @param userState
	 * @param startTime
	 * @param unit
	 * @param username
	 * @param cls
	 * @param onlines
	 * @param token
	 * @param copys
	 * @param rdptauth
	 * @param sigprint
	 * @param prints
	 * @param endTime
	 * @param ip
	 * @return returns
	 *         javax.xml.ws.Response<com.webservice.UpdateNonAccountingUserResponse
	 *         >
	 */
	@WebMethod(operationName = "UpdateNonAccountingUser", action = "http://wfdata.sale.gb168.cn/UpdateNonAccountingUser")
	@RequestWrapper(localName = "UpdateNonAccountingUser", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.UpdateNonAccountingUser")
	@ResponseWrapper(localName = "UpdateNonAccountingUserResponse", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.UpdateNonAccountingUserResponse")
	public Response<UpdateNonAccountingUserResponse> updateNonAccountingUserAsync(
			@WebParam(name = "Username", targetNamespace = "http://wfdata.sale.gb168.cn/") String username,
			@WebParam(name = "StartTime", targetNamespace = "http://wfdata.sale.gb168.cn/") XMLGregorianCalendar startTime,
			@WebParam(name = "EndTime", targetNamespace = "http://wfdata.sale.gb168.cn/") XMLGregorianCalendar endTime,
			@WebParam(name = "rdptauth", targetNamespace = "http://wfdata.sale.gb168.cn/") String rdptauth,
			@WebParam(name = "onlines", targetNamespace = "http://wfdata.sale.gb168.cn/") int onlines,
			@WebParam(name = "copys", targetNamespace = "http://wfdata.sale.gb168.cn/") int copys,
			@WebParam(name = "prints", targetNamespace = "http://wfdata.sale.gb168.cn/") int prints,
			@WebParam(name = "sigprint", targetNamespace = "http://wfdata.sale.gb168.cn/") int sigprint,
			@WebParam(name = "IP", targetNamespace = "http://wfdata.sale.gb168.cn/") String ip,
			@WebParam(name = "CLS", targetNamespace = "http://wfdata.sale.gb168.cn/") String cls,
			@WebParam(name = "Unit", targetNamespace = "http://wfdata.sale.gb168.cn/") String unit,
			@WebParam(name = "UserState", targetNamespace = "http://wfdata.sale.gb168.cn/") int userState,
			@WebParam(name = "Token", targetNamespace = "http://wfdata.sale.gb168.cn/") String token);

	/**
	 * 
	 * @param userState
	 * @param startTime
	 * @param unit
	 * @param username
	 * @param cls
	 * @param onlines
	 * @param token
	 * @param copys
	 * @param rdptauth
	 * @param asyncHandler
	 * @param sigprint
	 * @param prints
	 * @param endTime
	 * @param ip
	 * @return returns java.util.concurrent.Future<? extends java.lang.Object>
	 */
	@WebMethod(operationName = "UpdateNonAccountingUser", action = "http://wfdata.sale.gb168.cn/UpdateNonAccountingUser")
	@RequestWrapper(localName = "UpdateNonAccountingUser", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.UpdateNonAccountingUser")
	@ResponseWrapper(localName = "UpdateNonAccountingUserResponse", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.UpdateNonAccountingUserResponse")
	public Future<?> updateNonAccountingUserAsync(
			@WebParam(name = "Username", targetNamespace = "http://wfdata.sale.gb168.cn/") String username,
			@WebParam(name = "StartTime", targetNamespace = "http://wfdata.sale.gb168.cn/") XMLGregorianCalendar startTime,
			@WebParam(name = "EndTime", targetNamespace = "http://wfdata.sale.gb168.cn/") XMLGregorianCalendar endTime,
			@WebParam(name = "rdptauth", targetNamespace = "http://wfdata.sale.gb168.cn/") String rdptauth,
			@WebParam(name = "onlines", targetNamespace = "http://wfdata.sale.gb168.cn/") int onlines,
			@WebParam(name = "copys", targetNamespace = "http://wfdata.sale.gb168.cn/") int copys,
			@WebParam(name = "prints", targetNamespace = "http://wfdata.sale.gb168.cn/") int prints,
			@WebParam(name = "sigprint", targetNamespace = "http://wfdata.sale.gb168.cn/") int sigprint,
			@WebParam(name = "IP", targetNamespace = "http://wfdata.sale.gb168.cn/") String ip,
			@WebParam(name = "CLS", targetNamespace = "http://wfdata.sale.gb168.cn/") String cls,
			@WebParam(name = "Unit", targetNamespace = "http://wfdata.sale.gb168.cn/") String unit,
			@WebParam(name = "UserState", targetNamespace = "http://wfdata.sale.gb168.cn/") int userState,
			@WebParam(name = "Token", targetNamespace = "http://wfdata.sale.gb168.cn/") String token,
			@WebParam(name = "asyncHandler", targetNamespace = "") AsyncHandler<UpdateNonAccountingUserResponse> asyncHandler);

	/**
	 * 
	 * @param userState
	 * @param startTime
	 * @param unit
	 * @param username
	 * @param cls
	 * @param onlines
	 * @param token
	 * @param copys
	 * @param rdptauth
	 * @param sigprint
	 * @param prints
	 * @param endTime
	 * @param ip
	 * @return returns int
	 */
	@WebMethod(operationName = "UpdateNonAccountingUser", action = "http://wfdata.sale.gb168.cn/UpdateNonAccountingUser")
	@WebResult(name = "UpdateNonAccountingUserResult", targetNamespace = "http://wfdata.sale.gb168.cn/")
	@RequestWrapper(localName = "UpdateNonAccountingUser", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.UpdateNonAccountingUser")
	@ResponseWrapper(localName = "UpdateNonAccountingUserResponse", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.UpdateNonAccountingUserResponse")
	public int updateNonAccountingUser(
			@WebParam(name = "Username", targetNamespace = "http://wfdata.sale.gb168.cn/") String username,
			@WebParam(name = "StartTime", targetNamespace = "http://wfdata.sale.gb168.cn/") XMLGregorianCalendar startTime,
			@WebParam(name = "EndTime", targetNamespace = "http://wfdata.sale.gb168.cn/") XMLGregorianCalendar endTime,
			@WebParam(name = "rdptauth", targetNamespace = "http://wfdata.sale.gb168.cn/") String rdptauth,
			@WebParam(name = "onlines", targetNamespace = "http://wfdata.sale.gb168.cn/") int onlines,
			@WebParam(name = "copys", targetNamespace = "http://wfdata.sale.gb168.cn/") int copys,
			@WebParam(name = "prints", targetNamespace = "http://wfdata.sale.gb168.cn/") int prints,
			@WebParam(name = "sigprint", targetNamespace = "http://wfdata.sale.gb168.cn/") int sigprint,
			@WebParam(name = "IP", targetNamespace = "http://wfdata.sale.gb168.cn/") String ip,
			@WebParam(name = "CLS", targetNamespace = "http://wfdata.sale.gb168.cn/") String cls,
			@WebParam(name = "Unit", targetNamespace = "http://wfdata.sale.gb168.cn/") String unit,
			@WebParam(name = "UserState", targetNamespace = "http://wfdata.sale.gb168.cn/") int userState,
			@WebParam(name = "Token", targetNamespace = "http://wfdata.sale.gb168.cn/") String token);

	/**
	 * 
	 * @param userName
	 * @return returns
	 *         javax.xml.ws.Response<com.webservice.IsExistedNonAccountingUserResponse
	 *         >
	 */
	@WebMethod(operationName = "IsExistedNonAccountingUser", action = "http://wfdata.sale.gb168.cn/IsExistedNonAccountingUser")
	@RequestWrapper(localName = "IsExistedNonAccountingUser", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.IsExistedNonAccountingUser")
	@ResponseWrapper(localName = "IsExistedNonAccountingUserResponse", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.IsExistedNonAccountingUserResponse")
	public Response<IsExistedNonAccountingUserResponse> isExistedNonAccountingUserAsync(
			@WebParam(name = "userName", targetNamespace = "http://wfdata.sale.gb168.cn/") String userName);

	/**
	 * 
	 * @param asyncHandler
	 * @param userName
	 * @return returns java.util.concurrent.Future<? extends java.lang.Object>
	 */
	@WebMethod(operationName = "IsExistedNonAccountingUser", action = "http://wfdata.sale.gb168.cn/IsExistedNonAccountingUser")
	@RequestWrapper(localName = "IsExistedNonAccountingUser", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.IsExistedNonAccountingUser")
	@ResponseWrapper(localName = "IsExistedNonAccountingUserResponse", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.IsExistedNonAccountingUserResponse")
	public Future<?> isExistedNonAccountingUserAsync(
			@WebParam(name = "userName", targetNamespace = "http://wfdata.sale.gb168.cn/") String userName,
			@WebParam(name = "asyncHandler", targetNamespace = "") AsyncHandler<IsExistedNonAccountingUserResponse> asyncHandler);

	/**
	 * 
	 * @param userName
	 * @return returns boolean
	 */
	@WebMethod(operationName = "IsExistedNonAccountingUser", action = "http://wfdata.sale.gb168.cn/IsExistedNonAccountingUser")
	@WebResult(name = "IsExistedNonAccountingUserResult", targetNamespace = "http://wfdata.sale.gb168.cn/")
	@RequestWrapper(localName = "IsExistedNonAccountingUser", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.IsExistedNonAccountingUser")
	@ResponseWrapper(localName = "IsExistedNonAccountingUserResponse", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.IsExistedNonAccountingUserResponse")
	public boolean isExistedNonAccountingUser(
			@WebParam(name = "userName", targetNamespace = "http://wfdata.sale.gb168.cn/") String userName);

	/**
	 * 
	 * @param unit
	 * @return returns
	 *         javax.xml.ws.Response<com.webservice.ValidateUnitResponse>
	 */
	@WebMethod(operationName = "ValidateUnit", action = "http://wfdata.sale.gb168.cn/ValidateUnit")
	@RequestWrapper(localName = "ValidateUnit", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.ValidateUnit")
	@ResponseWrapper(localName = "ValidateUnitResponse", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.ValidateUnitResponse")
	public Response<ValidateUnitResponse> validateUnitAsync(
			@WebParam(name = "unit", targetNamespace = "http://wfdata.sale.gb168.cn/") String unit);

	/**
	 * 
	 * @param unit
	 * @param asyncHandler
	 * @return returns java.util.concurrent.Future<? extends java.lang.Object>
	 */
	@WebMethod(operationName = "ValidateUnit", action = "http://wfdata.sale.gb168.cn/ValidateUnit")
	@RequestWrapper(localName = "ValidateUnit", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.ValidateUnit")
	@ResponseWrapper(localName = "ValidateUnitResponse", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.ValidateUnitResponse")
	public Future<?> validateUnitAsync(
			@WebParam(name = "unit", targetNamespace = "http://wfdata.sale.gb168.cn/") String unit,
			@WebParam(name = "asyncHandler", targetNamespace = "") AsyncHandler<ValidateUnitResponse> asyncHandler);

	/**
	 * 
	 * @param unit
	 * @return returns int
	 */
	@WebMethod(operationName = "ValidateUnit", action = "http://wfdata.sale.gb168.cn/ValidateUnit")
	@WebResult(name = "ValidateUnitResult", targetNamespace = "http://wfdata.sale.gb168.cn/")
	@RequestWrapper(localName = "ValidateUnit", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.ValidateUnit")
	@ResponseWrapper(localName = "ValidateUnitResponse", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.ValidateUnitResponse")
	public int validateUnit(
			@WebParam(name = "unit", targetNamespace = "http://wfdata.sale.gb168.cn/") String unit);

	/**
	 * 
	 * @param startTime
	 * @param unit
	 * @param username
	 * @param cls
	 * @param onlines
	 * @param copys
	 * @param rdptauth
	 * @param sigprint
	 * @param prints
	 * @param endTime
	 * @param ip
	 * @return returns
	 *         javax.xml.ws.Response<com.webservice.ValidateNonAccountingUserResponse
	 *         >
	 */
	@WebMethod(operationName = "ValidateNonAccountingUser", action = "http://wfdata.sale.gb168.cn/ValidateNonAccountingUser")
	@RequestWrapper(localName = "ValidateNonAccountingUser", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.ValidateNonAccountingUser")
	@ResponseWrapper(localName = "ValidateNonAccountingUserResponse", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.ValidateNonAccountingUserResponse")
	public Response<ValidateNonAccountingUserResponse> validateNonAccountingUserAsync(
			@WebParam(name = "Username", targetNamespace = "http://wfdata.sale.gb168.cn/") String username,
			@WebParam(name = "StartTime", targetNamespace = "http://wfdata.sale.gb168.cn/") XMLGregorianCalendar startTime,
			@WebParam(name = "EndTime", targetNamespace = "http://wfdata.sale.gb168.cn/") XMLGregorianCalendar endTime,
			@WebParam(name = "rdptauth", targetNamespace = "http://wfdata.sale.gb168.cn/") String rdptauth,
			@WebParam(name = "onlines", targetNamespace = "http://wfdata.sale.gb168.cn/") int onlines,
			@WebParam(name = "copys", targetNamespace = "http://wfdata.sale.gb168.cn/") int copys,
			@WebParam(name = "prints", targetNamespace = "http://wfdata.sale.gb168.cn/") int prints,
			@WebParam(name = "sigprint", targetNamespace = "http://wfdata.sale.gb168.cn/") int sigprint,
			@WebParam(name = "IP", targetNamespace = "http://wfdata.sale.gb168.cn/") String ip,
			@WebParam(name = "CLS", targetNamespace = "http://wfdata.sale.gb168.cn/") String cls,
			@WebParam(name = "Unit", targetNamespace = "http://wfdata.sale.gb168.cn/") String unit);

	/**
	 * 
	 * @param startTime
	 * @param unit
	 * @param username
	 * @param cls
	 * @param onlines
	 * @param copys
	 * @param rdptauth
	 * @param asyncHandler
	 * @param sigprint
	 * @param prints
	 * @param endTime
	 * @param ip
	 * @return returns java.util.concurrent.Future<? extends java.lang.Object>
	 */
	@WebMethod(operationName = "ValidateNonAccountingUser", action = "http://wfdata.sale.gb168.cn/ValidateNonAccountingUser")
	@RequestWrapper(localName = "ValidateNonAccountingUser", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.ValidateNonAccountingUser")
	@ResponseWrapper(localName = "ValidateNonAccountingUserResponse", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.ValidateNonAccountingUserResponse")
	public Future<?> validateNonAccountingUserAsync(
			@WebParam(name = "Username", targetNamespace = "http://wfdata.sale.gb168.cn/") String username,
			@WebParam(name = "StartTime", targetNamespace = "http://wfdata.sale.gb168.cn/") XMLGregorianCalendar startTime,
			@WebParam(name = "EndTime", targetNamespace = "http://wfdata.sale.gb168.cn/") XMLGregorianCalendar endTime,
			@WebParam(name = "rdptauth", targetNamespace = "http://wfdata.sale.gb168.cn/") String rdptauth,
			@WebParam(name = "onlines", targetNamespace = "http://wfdata.sale.gb168.cn/") int onlines,
			@WebParam(name = "copys", targetNamespace = "http://wfdata.sale.gb168.cn/") int copys,
			@WebParam(name = "prints", targetNamespace = "http://wfdata.sale.gb168.cn/") int prints,
			@WebParam(name = "sigprint", targetNamespace = "http://wfdata.sale.gb168.cn/") int sigprint,
			@WebParam(name = "IP", targetNamespace = "http://wfdata.sale.gb168.cn/") String ip,
			@WebParam(name = "CLS", targetNamespace = "http://wfdata.sale.gb168.cn/") String cls,
			@WebParam(name = "Unit", targetNamespace = "http://wfdata.sale.gb168.cn/") String unit,
			@WebParam(name = "asyncHandler", targetNamespace = "") AsyncHandler<ValidateNonAccountingUserResponse> asyncHandler);

	/**
	 * 
	 * @param startTime
	 * @param unit
	 * @param username
	 * @param cls
	 * @param onlines
	 * @param copys
	 * @param rdptauth
	 * @param sigprint
	 * @param prints
	 * @param endTime
	 * @param ip
	 * @return returns int
	 */
	@WebMethod(operationName = "ValidateNonAccountingUser", action = "http://wfdata.sale.gb168.cn/ValidateNonAccountingUser")
	@WebResult(name = "ValidateNonAccountingUserResult", targetNamespace = "http://wfdata.sale.gb168.cn/")
	@RequestWrapper(localName = "ValidateNonAccountingUser", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.ValidateNonAccountingUser")
	@ResponseWrapper(localName = "ValidateNonAccountingUserResponse", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.ValidateNonAccountingUserResponse")
	public int validateNonAccountingUser(
			@WebParam(name = "Username", targetNamespace = "http://wfdata.sale.gb168.cn/") String username,
			@WebParam(name = "StartTime", targetNamespace = "http://wfdata.sale.gb168.cn/") XMLGregorianCalendar startTime,
			@WebParam(name = "EndTime", targetNamespace = "http://wfdata.sale.gb168.cn/") XMLGregorianCalendar endTime,
			@WebParam(name = "rdptauth", targetNamespace = "http://wfdata.sale.gb168.cn/") String rdptauth,
			@WebParam(name = "onlines", targetNamespace = "http://wfdata.sale.gb168.cn/") int onlines,
			@WebParam(name = "copys", targetNamespace = "http://wfdata.sale.gb168.cn/") int copys,
			@WebParam(name = "prints", targetNamespace = "http://wfdata.sale.gb168.cn/") int prints,
			@WebParam(name = "sigprint", targetNamespace = "http://wfdata.sale.gb168.cn/") int sigprint,
			@WebParam(name = "IP", targetNamespace = "http://wfdata.sale.gb168.cn/") String ip,
			@WebParam(name = "CLS", targetNamespace = "http://wfdata.sale.gb168.cn/") String cls,
			@WebParam(name = "Unit", targetNamespace = "http://wfdata.sale.gb168.cn/") String unit);

	/**
	 * 
	 * @param fileID
	 * @param username
	 * @return returns javax.xml.ws.Response<com.webservice.GetFileNameResponse>
	 */
	@WebMethod(operationName = "GetFileName", action = "http://wfdata.sale.gb168.cn/GetFileName")
	@RequestWrapper(localName = "GetFileName", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.GetFileName")
	@ResponseWrapper(localName = "GetFileNameResponse", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.GetFileNameResponse")
	public Response<GetFileNameResponse> getFileNameAsync(
			@WebParam(name = "Username", targetNamespace = "http://wfdata.sale.gb168.cn/") String username,
			@WebParam(name = "FileID", targetNamespace = "http://wfdata.sale.gb168.cn/") String fileID);

	/**
	 * 
	 * @param fileID
	 * @param username
	 * @param asyncHandler
	 * @return returns java.util.concurrent.Future<? extends java.lang.Object>
	 */
	@WebMethod(operationName = "GetFileName", action = "http://wfdata.sale.gb168.cn/GetFileName")
	@RequestWrapper(localName = "GetFileName", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.GetFileName")
	@ResponseWrapper(localName = "GetFileNameResponse", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.GetFileNameResponse")
	public Future<?> getFileNameAsync(
			@WebParam(name = "Username", targetNamespace = "http://wfdata.sale.gb168.cn/") String username,
			@WebParam(name = "FileID", targetNamespace = "http://wfdata.sale.gb168.cn/") String fileID,
			@WebParam(name = "asyncHandler", targetNamespace = "") AsyncHandler<GetFileNameResponse> asyncHandler);

	/**
	 * 
	 * @param fileID
	 * @param username
	 * @return returns java.lang.String
	 */
	@WebMethod(operationName = "GetFileName", action = "http://wfdata.sale.gb168.cn/GetFileName")
	@WebResult(name = "GetFileNameResult", targetNamespace = "http://wfdata.sale.gb168.cn/")
	@RequestWrapper(localName = "GetFileName", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.GetFileName")
	@ResponseWrapper(localName = "GetFileNameResponse", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.GetFileNameResponse")
	public String getFileName(
			@WebParam(name = "Username", targetNamespace = "http://wfdata.sale.gb168.cn/") String username,
			@WebParam(name = "FileID", targetNamespace = "http://wfdata.sale.gb168.cn/") String fileID);

	/**
	 * 
	 * @param username
	 * @return returns
	 *         javax.xml.ws.Response<com.webservice.GetUserFolderResponse>
	 */
	@WebMethod(operationName = "GetUserFolder", action = "http://wfdata.sale.gb168.cn/GetUserFolder")
	@RequestWrapper(localName = "GetUserFolder", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.GetUserFolder")
	@ResponseWrapper(localName = "GetUserFolderResponse", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.GetUserFolderResponse")
	public Response<GetUserFolderResponse> getUserFolderAsync(
			@WebParam(name = "username", targetNamespace = "http://wfdata.sale.gb168.cn/") String username);

	/**
	 * 
	 * @param username
	 * @param asyncHandler
	 * @return returns java.util.concurrent.Future<? extends java.lang.Object>
	 */
	@WebMethod(operationName = "GetUserFolder", action = "http://wfdata.sale.gb168.cn/GetUserFolder")
	@RequestWrapper(localName = "GetUserFolder", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.GetUserFolder")
	@ResponseWrapper(localName = "GetUserFolderResponse", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.GetUserFolderResponse")
	public Future<?> getUserFolderAsync(
			@WebParam(name = "username", targetNamespace = "http://wfdata.sale.gb168.cn/") String username,
			@WebParam(name = "asyncHandler", targetNamespace = "") AsyncHandler<GetUserFolderResponse> asyncHandler);

	/**
	 * 
	 * @param username
	 * @return returns java.lang.String
	 */
	@WebMethod(operationName = "GetUserFolder", action = "http://wfdata.sale.gb168.cn/GetUserFolder")
	@WebResult(name = "GetUserFolderResult", targetNamespace = "http://wfdata.sale.gb168.cn/")
	@RequestWrapper(localName = "GetUserFolder", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.GetUserFolder")
	@ResponseWrapper(localName = "GetUserFolderResponse", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.GetUserFolderResponse")
	public String getUserFolder(
			@WebParam(name = "username", targetNamespace = "http://wfdata.sale.gb168.cn/") String username);

	/**
	 * 
	 * @param unit
	 * @param fileType
	 * @param fileID
	 * @param username
	 * @param token
	 * @param postDate
	 * @param userType
	 * @return returns
	 *         javax.xml.ws.Response<com.webservice.DownloadFileUrlResponse>
	 */
	@WebMethod(operationName = "DownloadFileUrl", action = "http://wfdata.sale.gb168.cn/DownloadFileUrl")
	@RequestWrapper(localName = "DownloadFileUrl", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.DownloadFileUrl")
	@ResponseWrapper(localName = "DownloadFileUrlResponse", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.DownloadFileUrlResponse")
	public Response<DownloadFileUrlResponse> downloadFileUrlAsync(
			@WebParam(name = "Username", targetNamespace = "http://wfdata.sale.gb168.cn/") String username,
			@WebParam(name = "Unit", targetNamespace = "http://wfdata.sale.gb168.cn/") String unit,
			@WebParam(name = "UserType", targetNamespace = "http://wfdata.sale.gb168.cn/") String userType,
			@WebParam(name = "FileID", targetNamespace = "http://wfdata.sale.gb168.cn/") String fileID,
			@WebParam(name = "FileType", targetNamespace = "http://wfdata.sale.gb168.cn/") int fileType,
			@WebParam(name = "PostDate", targetNamespace = "http://wfdata.sale.gb168.cn/") XMLGregorianCalendar postDate,
			@WebParam(name = "Token", targetNamespace = "http://wfdata.sale.gb168.cn/") String token);

	/**
	 * 
	 * @param unit
	 * @param fileType
	 * @param fileID
	 * @param username
	 * @param token
	 * @param postDate
	 * @param asyncHandler
	 * @param userType
	 * @return returns java.util.concurrent.Future<? extends java.lang.Object>
	 */
	@WebMethod(operationName = "DownloadFileUrl", action = "http://wfdata.sale.gb168.cn/DownloadFileUrl")
	@RequestWrapper(localName = "DownloadFileUrl", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.DownloadFileUrl")
	@ResponseWrapper(localName = "DownloadFileUrlResponse", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.DownloadFileUrlResponse")
	public Future<?> downloadFileUrlAsync(
			@WebParam(name = "Username", targetNamespace = "http://wfdata.sale.gb168.cn/") String username,
			@WebParam(name = "Unit", targetNamespace = "http://wfdata.sale.gb168.cn/") String unit,
			@WebParam(name = "UserType", targetNamespace = "http://wfdata.sale.gb168.cn/") String userType,
			@WebParam(name = "FileID", targetNamespace = "http://wfdata.sale.gb168.cn/") String fileID,
			@WebParam(name = "FileType", targetNamespace = "http://wfdata.sale.gb168.cn/") int fileType,
			@WebParam(name = "PostDate", targetNamespace = "http://wfdata.sale.gb168.cn/") XMLGregorianCalendar postDate,
			@WebParam(name = "Token", targetNamespace = "http://wfdata.sale.gb168.cn/") String token,
			@WebParam(name = "asyncHandler", targetNamespace = "") AsyncHandler<DownloadFileUrlResponse> asyncHandler);

	/**
	 * 
	 * @param unit
	 * @param fileType
	 * @param fileID
	 * @param username
	 * @param token
	 * @param postDate
	 * @param userType
	 * @return returns java.lang.String
	 */
	@WebMethod(operationName = "DownloadFileUrl", action = "http://wfdata.sale.gb168.cn/DownloadFileUrl")
	@WebResult(name = "DownloadFileUrlResult", targetNamespace = "http://wfdata.sale.gb168.cn/")
	@RequestWrapper(localName = "DownloadFileUrl", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.DownloadFileUrl")
	@ResponseWrapper(localName = "DownloadFileUrlResponse", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.DownloadFileUrlResponse")
	public String downloadFileUrl(
			@WebParam(name = "Username", targetNamespace = "http://wfdata.sale.gb168.cn/") String username,
			@WebParam(name = "Unit", targetNamespace = "http://wfdata.sale.gb168.cn/") String unit,
			@WebParam(name = "UserType", targetNamespace = "http://wfdata.sale.gb168.cn/") String userType,
			@WebParam(name = "FileID", targetNamespace = "http://wfdata.sale.gb168.cn/") String fileID,
			@WebParam(name = "FileType", targetNamespace = "http://wfdata.sale.gb168.cn/") int fileType,
			@WebParam(name = "PostDate", targetNamespace = "http://wfdata.sale.gb168.cn/") XMLGregorianCalendar postDate,
			@WebParam(name = "Token", targetNamespace = "http://wfdata.sale.gb168.cn/") String token);

	/**
	 * 
	 * @param unit
	 * @param fileType
	 * @param fileID
	 * @param username
	 * @param token
	 * @param postDate
	 * @param userType
	 * @return returns javax.xml.ws.Response<com.webservice.GetFileResponse>
	 */
	@WebMethod(operationName = "GetFile", action = "http://wfdata.sale.gb168.cn/GetFile")
	@RequestWrapper(localName = "GetFile", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.GetFile")
	@ResponseWrapper(localName = "GetFileResponse", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.GetFileResponse")
	public Response<GetFileResponse> getFileAsync(
			@WebParam(name = "Username", targetNamespace = "http://wfdata.sale.gb168.cn/") String username,
			@WebParam(name = "Unit", targetNamespace = "http://wfdata.sale.gb168.cn/") String unit,
			@WebParam(name = "UserType", targetNamespace = "http://wfdata.sale.gb168.cn/") String userType,
			@WebParam(name = "FileID", targetNamespace = "http://wfdata.sale.gb168.cn/") String fileID,
			@WebParam(name = "FileType", targetNamespace = "http://wfdata.sale.gb168.cn/") int fileType,
			@WebParam(name = "PostDate", targetNamespace = "http://wfdata.sale.gb168.cn/") XMLGregorianCalendar postDate,
			@WebParam(name = "Token", targetNamespace = "http://wfdata.sale.gb168.cn/") String token);

	/**
	 * 
	 * @param unit
	 * @param fileType
	 * @param fileID
	 * @param username
	 * @param token
	 * @param postDate
	 * @param asyncHandler
	 * @param userType
	 * @return returns java.util.concurrent.Future<? extends java.lang.Object>
	 */
	@WebMethod(operationName = "GetFile", action = "http://wfdata.sale.gb168.cn/GetFile")
	@RequestWrapper(localName = "GetFile", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.GetFile")
	@ResponseWrapper(localName = "GetFileResponse", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.GetFileResponse")
	public Future<?> getFileAsync(
			@WebParam(name = "Username", targetNamespace = "http://wfdata.sale.gb168.cn/") String username,
			@WebParam(name = "Unit", targetNamespace = "http://wfdata.sale.gb168.cn/") String unit,
			@WebParam(name = "UserType", targetNamespace = "http://wfdata.sale.gb168.cn/") String userType,
			@WebParam(name = "FileID", targetNamespace = "http://wfdata.sale.gb168.cn/") String fileID,
			@WebParam(name = "FileType", targetNamespace = "http://wfdata.sale.gb168.cn/") int fileType,
			@WebParam(name = "PostDate", targetNamespace = "http://wfdata.sale.gb168.cn/") XMLGregorianCalendar postDate,
			@WebParam(name = "Token", targetNamespace = "http://wfdata.sale.gb168.cn/") String token,
			@WebParam(name = "asyncHandler", targetNamespace = "") AsyncHandler<GetFileResponse> asyncHandler);

	/**
	 * 
	 * @param result
	 * @param unit
	 * @param fileType
	 * @param fileID
	 * @param username
	 * @param token
	 * @param postDate
	 * @param getFileResult
	 * @param userType
	 */
	@WebMethod(operationName = "GetFile", action = "http://wfdata.sale.gb168.cn/GetFile")
	@RequestWrapper(localName = "GetFile", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.GetFile")
	@ResponseWrapper(localName = "GetFileResponse", targetNamespace = "http://wfdata.sale.gb168.cn/", className = "com.webservice.GetFileResponse")
	public void getFile(
			@WebParam(name = "Username", targetNamespace = "http://wfdata.sale.gb168.cn/") String username,
			@WebParam(name = "Unit", targetNamespace = "http://wfdata.sale.gb168.cn/") String unit,
			@WebParam(name = "UserType", targetNamespace = "http://wfdata.sale.gb168.cn/") String userType,
			@WebParam(name = "FileID", targetNamespace = "http://wfdata.sale.gb168.cn/") String fileID,
			@WebParam(name = "FileType", targetNamespace = "http://wfdata.sale.gb168.cn/") int fileType,
			@WebParam(name = "PostDate", targetNamespace = "http://wfdata.sale.gb168.cn/") XMLGregorianCalendar postDate,
			@WebParam(name = "Token", targetNamespace = "http://wfdata.sale.gb168.cn/") String token,
			@WebParam(name = "GetFileResult", targetNamespace = "http://wfdata.sale.gb168.cn/", mode = WebParam.Mode.OUT) Holder<Boolean> getFileResult,
			@WebParam(name = "result", targetNamespace = "http://wfdata.sale.gb168.cn/", mode = WebParam.Mode.OUT) Holder<byte[]> result);

}
